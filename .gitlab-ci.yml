# This file is a template, and might need editing before it works on your project.
# This example is for testing Django with MySQL.
#
# The test CI/CD variables MYSQL_DB, MYSQL_USER and MYSQL_PASS can be set in the project settings at:
#     Settings --> CI/CD --> Variables
#
# The Django settings in settings.py, used in tests, might look similar to:
#
#  DATABASES = {
#      'default': {
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': os.environ.get('MYSQL_DATABASE'),
#        	'USER':  os.environ.get('MYSQL_USER'),
#        	'PASSWORD': os.environ.get('MYSQL_PASSWORD'),
#       	'HOST': 'mysql',
#     	  'PORT': '3306',
#         'CONN_MAX_AGE':60,
#      },
#  }
#
# It is possible to use '--settings' to specify a custom settings file on the command line below or use an environment
# variable to trigger an include on the bottom of your settings.py:
#   if os.environ.get('DJANGO_CONFIG')=='test':
#       from .settings_test import *
#
# It is also possible to hardcode the database name and credentials in the settings.py file and in the .gitlab-ci.yml file.
#
# The mysql service needs some variables too. See https://hub.docker.com/_/mysql for possible mysql env variables
# Note that when using a service in GitLab CI/CD that needs environment variables to run, only variables defined in
# .gitlab-ci.yml are passed to the service and variables defined in the GitLab UI are not.
# https://gitlab.com/gitlab-org/gitlab/-/issues/30178

# save minutes by select run from web
workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

variables:
  # DJANGO_CONFIG: "test"
  PIP_CACHE_DIR: $CI_PROJECT_DIR/.cache/pip
  DEV_DB_NAME: $DEV_DB_NAME
  DEV_DB_USER: $DEV_DB_USER
  DEV_DB_PASS: $DEV_DB_PASS
  DEV_DB_HOST: $DEV_DB_HOST
  DEV_DB_PORT: $DEV_DB_PORT

default:
  # image: ubuntu:20.04
  image: python:3.10
  #
  # Pick zero or more services to be used on all builds.
  # Only needed when using a docker container to run your tests in.
  # Check out: http://docs.gitlab.com/ee/ci/docker/using_docker_images.html#what-is-a-service
  # services:
  #   - mysql:8.0
  #
  # This folder is cached between builds
  # http://docs.gitlab.com/ee/ci/yaml/README.html#cache
  cache:
    paths:
      # - ~/.cache/pip/
      - .cache/pip
      - venv/
  before_script:
    # - export DEBIAN_FRONTEND=noninteractive
    # - cd ./DjangoWebProject1
    # - cd ./DjangoWebProject1
    # - apt -y update
    # - apt -y install apt-utils
    # - apt -y install net-tools python3.8-tk python3-pip mysql-client libmysqlclient-dev # mysql
    # - apt -y install libpq-dev # postgres
    # - apt -y upgrade
    # - python3.8 -m pip install -r requirements.txt
      - python -V               # Print out python version for debugging
      - pip install virtualenv
      - virtualenv venv
      - ls
      - source venv/bin/activate
      - ls
  timeout: 5m

stages:          # List of stages for jobs, and their order of execution
  - build
  - code
  - test
  - deploy

# migrations:
#   stage: build
#   script:
#     - python3 manage.py makemigrations
#     # - python3 manage.py makemigrations myapp
#     - python3 manage.py migrate
#     - python3 manage.py check

python-build:
  stage: build
  allow_failure: false
  script:
    # python3.8 --version
    # python3.8 -m pip show flake
    # python3.8 -m pip show django
    - python --version
    - python -m pip install -r requirements.txt
    - python -m pip show django
    - python -m pip show flake8
  timeout: 5m

flake-check:
  stage: code
  allow_failure: true
  script:
    # - flake8
    - python -m flake8
  timeout: 5m

# django-tests:
#   stage: test
#   script:
#     # The MYSQL user only gets permissions for MYSQL_DB, so Django can't create a test database.
#     # - echo "GRANT ALL on *.* to '${MYSQL_USER}';"| mysql -u root --password="${MYSQL_ROOT_PASSWORD}" -h mysql
#     # use python3 explicitly. see https://wiki.ubuntu.com/Python/3
#     - python DjangoWebProject1/DjangoWebProject1/ manage.py test
#   timeout: 10m

model-tests:
  allow_failure: true
  stage: test
  variables:
    TEST_NAME: $CI_JOB_NAME
  script:
    # The MYSQL user only gets permissions for MYSQL_DB, so Django can't create a test database.
    # - echo "GRANT ALL on *.* to '${MYSQL_USER}';"| mysql -u root --password="${MYSQL_ROOT_PASSWORD}" -h mysql
    # use python3 explicitly. see https://wiki.ubuntu.com/Python/3
    - python manage.py test tests.test_models
  timeout: 5m

permission-tests:
  allow_failure: true
  stage: test
  variables:
    TEST_NAME: $CI_JOB_NAME
  script:
    - python manage.py test tests.test_permission
  timeout: 10m

browser-tests:
  allow_failure: true
  stage: test
  variables:
    TEST_NAME: $CI_JOB_NAME
  script:
    - python manage.py test tests.test_browser
  timeout: 5m

deploy-check:
  allow_failure: true
  stage: deploy
  script:
    - python manage.py check --deploy
  timeout: 5m
